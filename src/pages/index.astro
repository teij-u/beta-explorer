---
// このファイルは、サイトのトップページを定義しています。
import Layout from '../layouts/Layout.astro';
import { createClient } from 'microcms-js-sdk';

type Spot = {
  id: string;
  spotName: string;
  description: string;
  image?: { url: string; height: number; width: number; };
  category: string[];
  region: string[];
};

const client = createClient({
  serviceDomain: import.meta.env.MICROCMS_SERVICE_DOMAIN,
  apiKey: import.meta.env.MICROCMS_API_KEY,
});

const response = await client.get<{ contents: Spot[] }>({ 
  endpoint: "spots", 
  queries: { limit: 100 }
});
const spots: Spot[] = response.contents;

const allCategories = spots.flatMap((spot) => spot.category);
const uniqueCategories = [...new Set(allCategories)];

const allRegions = spots.flatMap((spot) => spot.region);
const uniqueRegions = [...new Set(allRegions)];
---

<Layout title="Route Explorer - トップページ">
  {/* ヒーローセクション */}
  <div
    class="relative h-80 md:h-70 overflow-hidden bg-cover bg-center flex items-center justify-center text-center p-4 mb-[-4rem] shadow-lg hidden sm:flex"
    style={`background-image: url('/images/hero-image.jpg');`}
  >
    <div class="absolute inset-0 bg-black/20"></div>
    <div class="absolute inset-0 bg-gradient-to-b from-black/20 to-transparent"></div>
    <div class="relative z-10 flex flex-col justify-start h-full pt-8">
      <header class="text-center mt-4 mb-8"> 
        <h1 class="text-5xl md:text-7xl font-bold text-shadow-lg text-white">β-Explorer</h1> 
        <p class="text-lg md:text-2xl font-bold opacity-90 mt-4 text-white">
          最強穴場スポットを <span class="font-semibold text-3xl">発見</span> しよう！
        </p>
      </header>
    </div>
  </div>

  {/* ↓↓↓ 新しい検索パネルのコードに置き換え ↓↓↓ */}
<div class="search-panel bg-white/90 dark:bg-zinc-800/90 backdrop-blur-sm rounded-2xl p-4 md:p-6 shadow-2xl max-w-5xl mx-auto relative z-20">

  {/* --- PC用のレイアウト --- */}
  <div class="hidden md:flex items-end gap-4">
    {/* キーワード入力 */}
    <div class="flex-grow">
      <label for="keyword" class="block mb-1 text-sm font-semibold text-gray-600 dark:text-zinc-300">キーワード</label>
      <input type="text" id="keyword" class="w-full p-3 border-2 border-gray-200 rounded-lg bg-white dark:bg-zinc-700 dark:border-zinc-600 dark:text-white" placeholder="例：カフェ、ラーメン、美容院">
    </div>
    {/* 地域セレクト */}
    <div>
      <label for="region" class="block mb-1 text-sm font-semibold text-gray-600 dark:text-zinc-300">地域</label>
      <select id="region" class="w-full p-3 border-2 border-gray-200 rounded-lg bg-white dark:bg-zinc-700 dark:border-zinc-600 dark:text-white">
        <option value="">すべての地域</option>
        {uniqueRegions.map(region => <option value={region}>{region}</option>)}
      </select>
    </div>
    {/* カテゴリーセレクト */}
    <div>
      <label for="category" class="block mb-1 text-sm font-semibold text-gray-600 dark:text-zinc-300">カテゴリー</label>
      <select id="category" class="w-full p-3 border-2 border-gray-200 rounded-lg bg-white dark:bg-zinc-700 dark:border-zinc-600 dark:text-white">
        <option value="">すべてのカテゴリー</option>
        {uniqueCategories.map(category => <option value={category}>{category}</option>)}
      </select>
    </div>
    {/* 検索ボタン */}
    <div>
      <button id="search-btn" class="w-full flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
        検索
      </button>
    </div>
  </div>

  {/* --- スマートフォン用のレイアウト --- */}
  <div class="md:hidden">
    {/* キーワード入力とボタン */}
    <div class="relative flex items-center">
      <input type="text" id="keyword-mobile" class="w-full p-3 border-2 border-gray-200 rounded-lg bg-white dark:bg-zinc-700 dark:border-zinc-600 dark:text-white pr-24" placeholder="例：カフェ、ラーメン…">
      <div class="absolute right-1 flex items-center">
        <button id="filter-toggle-btn" class="p-2 text-gray-500 hover:text-gray-700 dark:hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6V4m0 4v10m0-4.5a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zM4 6h16M4 12h16M4 18h16" /></svg>
        </button>
        <button id="search-btn-mobile" class="p-2 text-gray-500 hover:text-gray-700 dark:hover:text-white">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" /></svg>
        </button>
      </div>
    </div>
    {/* 絞り込みオプション（普段は非表示） */}
    <div id="mobile-filters" class="hidden mt-4 space-y-4">
      <div>
        <label for="region-mobile" class="block mb-1 text-sm font-semibold text-gray-600 dark:text-zinc-300">地域</label>
        <select id="region-mobile" class="w-full p-3 border-2 border-gray-200 rounded-lg bg-white dark:bg-zinc-700 dark:border-zinc-600 dark:text-white">
          <option value="">すべての地域</option>
          {uniqueRegions.map(region => <option value={region}>{region}</option>)}
        </select>
      </div>
      <div>
        <label for="category-mobile" class="block mb-1 text-sm font-semibold text-gray-600 dark:text-zinc-300">カテゴリー</label>
        <select id="category-mobile" class="w-full p-3 border-2 border-gray-200 rounded-lg bg-white dark:bg-zinc-700 dark:border-zinc-600 dark:text-white">
          <option value="">すべてのカテゴリー</option>
          {uniqueCategories.map(category => <option value={category}>{category}</option>)}
        </select>
      </div>
    </div>
  </div>

  {/* クリアボタン（共通） */}
  <div class="flex justify-end mt-4">
    <button id="clear-btn" class="text-sm text-gray-600 dark:text-zinc-400 hover:underline">条件をクリア</button>
  </div>

</div>

    {/* 新規スポットボタン */}
    <div class="flex justify-center gap-4 mt-6">
      <a 
        href="https://docs.google.com/forms/d/e/1FAIpQLScP7KM5gIVpuKUfUOaPbhHSHUobYIivDZRJ1RU8Zg1PTcl_7g/viewform?usp=dialog" 
        target="_blank" 
        rel="noopener noreferrer" 
        class="inline-flex items-center gap-2 px-8 py-3 bg-gradient-to-r from-blue-500 via-blue-600 to-sky-700 text-white font-semibold rounded-full shadow-lg hover:from-blue-700 hover:to-sky-600 hover:scale-105 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        新規スポット
      </a>
    </div>
    <div class="flex justify-end mt-4"></div>
  </div>

  {/* スポット一覧 */}
  <ul id="spotList" class="mt-12 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
    {spots.map((spot) => (
      <li
        class="bg-white dark:bg-zinc-800 rounded-xl shadow-md overflow-hidden flex flex-col"
        data-spot-name={spot.spotName}
        data-description={spot.description}
        data-region={spot.region[0]}
        data-category={spot.category.join(',')}
      >
        <div class="relative">
          <a href={`/spots/${spot.id}/`}>
  {spot.image ? (
    <img src={spot.image.url} alt={spot.spotName} class="w-full h-32 sm:h-48 object-cover" />
  ) : (
    <div class="w-full h-32 sm:h-48 bg-gray-200 flex items-center justify-center">
      {/* ... */}
    </div>
  )}
</a>
        </div>
        <div class="p-6 flex-grow flex flex-col relative group">
          <div class="flex items-baseline flex-wrap gap-2 mb-2">
            <a href={`/category/${spot.category[0]}/`} class="relative z-10">
              <span class="inline-block bg-blue-100 text-blue-800 dark:bg-blue-900/70 dark:text-blue-200 text-xs font-semibold px-2.5 py-1 rounded-full hover:bg-blue-200 transition-colors">
                {spot.category[0]}
              </span>
            </a>
            <a href={`/region/${spot.region[0]}/`} class="relative z-10">
              <span class="inline-block bg-green-100 text-green-800 dark:bg-green-900/70 dark:text-green-200 text-xs font-semibold px-2.5 py-1 rounded-full hover:bg-green-200 transition-colors">
                {spot.region[0]}
              </span>
            </a>
          </div>
          <h2 class="text-base md:text-2xl font-bold text-gray-900 dark:text-zinc-100 leading-tight">
            {spot.spotName}
          </h2>
          <div class="prose prose-sm md:prose-sm mt-2 text-gray-600 dark:text-zinc-400 dark:prose-invert line-clamp-3" set:html={spot.description} />
          <a href={`/spots/${spot.id}/`} class="absolute inset-0 z-0" aria-label={spot.spotName}></a>
        </div>
      </li>
    ))}
  </ul>

  {/* トップに戻るボタン */}
  <a 
    href="/" 
    id="backToTopBtn"
    class="fixed bottom-8 right-8 md:right-12 z-50 inline-flex items-center justify-center px-6 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600 transition-colors font-semibold shadow"
    style="box-shadow: 0 4px 24px rgba(0,0,0,0.15); display: none;" 
    title="スポット一覧に戻る"
  >
    ^ トップに戻る
  </a>

  <script is:inline>
  // PC用とスマホ用の要素を全て取得
  const keywordInput = document.getElementById('keyword');
  const regionSelect = document.getElementById('region');
  const categorySelect = document.getElementById('category');
  const searchBtn = document.getElementById('search-btn');

  const keywordInputMobile = document.getElementById('keyword-mobile');
  const regionSelectMobile = document.getElementById('region-mobile');
  const categorySelectMobile = document.getElementById('category-mobile');
  const searchBtnMobile = document.getElementById('search-btn-mobile');
  
  const clearBtn = document.getElementById('clear-btn');
  const spotList = document.getElementById('spotList');
  
  const filterToggleBtn = document.getElementById('filter-toggle-btn');
  const mobileFilters = document.getElementById('mobile-filters');

  // 必須要素が存在することを確認してから処理を開始
  if (spotList && clearBtn) {
    const spots = spotList.querySelectorAll('li');

    // 絞り込みを実行するメインの関数
    const filterSpots = () => {
      // 現在の画面幅に応じて、PC用かスマホ用の入力値かを取得
      const isMobile = window.innerWidth < 768;
      const keywordTerm = (isMobile ? keywordInputMobile.value : keywordInput.value).toLowerCase();
      const regionTerm = isMobile ? regionSelectMobile.value : regionSelect.value;
      const categoryTerm = isMobile ? categorySelectMobile.value : categorySelect.value;

      spots.forEach(spot => {
        // ...（ここの絞り込みロジックは以前と同じ）
        const spotData = spot.dataset;
        const region = spotData.region || '';
        const category = spotData.category || '';
        const searchText = `${spotData.spotName || ''} ${spotData.description || ''}`.toLowerCase();

        const keywordMatch = !keywordTerm || searchText.includes(keywordTerm);
        const regionMatch = !regionTerm || region === regionTerm;
        const categoryMatch = !categoryTerm || category.split(',').includes(categoryTerm);

        if (keywordMatch && regionMatch && categoryMatch) {
          spot.style.display = '';
        } else {
          spot.style.display = 'none';
        }
      });
    };

    // 条件をクリアする関数
    const clearFilters = () => {
      // PC用とスマホ用の両方のフォームをリセット
      keywordInput.value = '';
      regionSelect.value = '';
      categorySelect.value = '';
      keywordInputMobile.value = '';
      regionSelectMobile.value = '';
      categorySelectMobile.value = '';
      filterSpots(); // 絞り込みを再実行して全件表示に戻す
    };

    // 各ボタンにイベントリスナーを設定
    searchBtn?.addEventListener('click', filterSpots);
    searchBtnMobile?.addEventListener('click', filterSpots);
    clearBtn.addEventListener('click', clearFilters);

    // スマホ用の絞り込み開閉ボタンの処理
    filterToggleBtn?.addEventListener('click', () => {
      mobileFilters?.classList.toggle('hidden');
    });

    // プルダウンが変更された時も、自動で検索を実行
    regionSelect?.addEventListener('change', filterSpots);
    categorySelect?.addEventListener('change', filterSpots);
    regionSelectMobile?.addEventListener('change', filterSpots);
    categorySelectMobile?.addEventListener('change', filterSpots);
  }
</script>
  
</Layout>

